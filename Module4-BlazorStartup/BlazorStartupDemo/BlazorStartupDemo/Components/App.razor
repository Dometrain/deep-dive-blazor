<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <base href="/" />
    <link rel="stylesheet" href="bootstrap/bootstrap.min.css" />
    <link rel="stylesheet" href="app.css" />
    <link rel="stylesheet" href="BlazorStartupDemo.styles.css" />
    <link rel="icon" type="image/png" href="favicon.png" />
    <HeadOutlet @rendermode="InteractiveAuto" />
</head>

<body>
    <Routes @rendermode="InteractiveAuto" />
    <script src="_framework/blazor.web.js" autostart="false"></script>
    <script>
        Blazor.start({
            webAssembly:
            {
                configureRuntime: dotnet =>
                {
                    //https://github.com/dotnet/aspnetcore/blob/6359c76dfb4038bfd76bb4c327d472e8b1b8a450/src/Components/dotnet-runtime-js/dotnet.d.ts#L4
                    dotnet.withEnvironmentVariable("CONFIGURE_RUNTIME", "true");
                    dotnet.withEnvironmentVariable("MONO_LOG_LEVEL", "debug");
                    dotnet.withEnvironmentVariable("MONO_LOG_MASK", "all");
                },
                // loadBootResource: function (type, name, defaultUri, integrity)
                // {
                //     console.log(Loading: '${type}', '${name}', '${defaultUri}', '${integrity}');
                //     switch (type)
                //     {
                //     case 'dotnetjs':
                //     case 'dotnetwasm':
                //     case 'timezonedata':
                //         return https://cdn.example.com/blazorwebassembly/{VERSION}/${name};
                //     }
                // },
                initializers:
                {
                    beforeStart: [()=>{console.log("Wasm beforeStart triggered");}],
                    afterStarted:[()=>{console.log("Wasm afterStarted triggered");}]
                }
            },
            ssr:
            {
                disableDomPreservation: true,
                circuitInactivityTimeoutMS: 1000
            },
            circuit:
            {
                reconnectionOptions:
                {
                    maxRetries: 30,
                    retryIntervalMilliseconds: 2000, //computeDefaultRetryInterval,
                    dialogId: 'components-reconnect-modal',
                },
                detailedErrors: true,
                reconnectionHandler:
                {
                    // Callback when the connection to the server is successfully established
                    onConnectionUp: (id) =>
                    {
                        console.log("Circuit connection established with ID: ${id}");
                        Blazor.defaultReconnectionHandler.onConnectionUp(id);
                    },

                    // Callback when the connection to the server is lost
                    onConnectionDown: (id, reason) =>
                    {
                        console.warn("Circuit connection lost for ID ${id}. Reason: ${reason}");
                        Blazor.defaultReconnectionHandler.onConnectionDown(id,reason);
                    }
                },
                initializers:
                {
                    beforeStart: [()=>{console.log("Circuit beforeStart triggered");}],
                    afterStarted:[()=>{console.log("Circuit afterStarted triggered");}]
                },
                circuitHandlers:
                [{
                    onCircuitOpened: ()=>{console.log("Circuit onCircuitOpened triggered");},
                    onCircuitClosed: ()=>{console.log("Circuit onCircuitClosed triggered");}
                }]

            }    
        });
    </script>
</body>

</html>
